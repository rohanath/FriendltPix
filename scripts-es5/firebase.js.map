{"version":3,"sources":["../scripts/firebase.js"],"names":["window","friendlyPix","Firebase","database","firebase","storage","auth","firebaseRefs","forEach","ref","off","postId","callback","latestCommentId","_subscribeToFeed","_getPaginatedFeed","COMMENTS_PAGE_SIZE","latestPostId","POSTS_PAGE_SIZE","currentUser","uid","USER_PAGE_POSTS_PAGE_SIZE","uri","latestEntryId","fetchPostDetails","feedRef","orderByKey","startAt","on","feedData","key","val","once","then","postData","push","pageSize","earliestEntryId","console","log","endAt","limitToLast","entries","data","nextPage","entryIds","Object","keys","length","nextPageStartingId","shift","queries","map","getPostData","Promise","all","deleteOps","results","result","deleteFromFeed","followingRef","followedUid","followingData","followedUserPostsRef","String","updates","update","followedUserId","following","updateOperations","lastSyncedPostId","searchString","maxResults","latinize","toLowerCase","query","orderByChild","limitToFirst","reversedQuery","people","userIds","name","userId","_search_index","full_name","reversedName","reversed_full_name","startsWith","displayName","imageUrl","photoURL","indexOf","facebookUID","providerData","find","providerId","updateProfile","searchFullName","searchReversedFullName","split","reverse","join","e","error","updateData","profile_picture","likesRef","value","set","ServerValue","TIMESTAMP","commentText","commentObject","text","timestamp","author","commentId","remove","commentRef","pic","thumb","fileName","newPostKey","picRef","metadata","contentType","type","picUploadTask","put","snapshot","totalBytes","getDownloadURL","url","catch","thumbRef","tumbUploadTask","full_url","urls","thumb_url","client","full_storage_uri","toString","thumb_storage_uri","follow","lastPostId","post","block","followStatusRef","blockStatusRef","checked","token","likesCallback","numChildren","commentsCallback","commentsRef","followersCallback","followersRef","followingCallback","followingUids","fetchProfileDetailsOperations","loadUserProfile","followingUid","profiles","postsCallback","userPostsRef","picStorageUri","thumbStorageUri","updateObj","deleteFromDatabase","deletePicFromStorage","refFromURL","delete","deleteThumbFromStorage","deletionCallback","postsRef"],"mappings":"AAAA;;;;;;;;;;;;;;GAeA,a,2oBAEAA,OAAOC,WAAP,CAAqBD,OAAOC,WAAP,EAAsB,EAA3C,CAEA;;GAGAA,YAAYC,QAAZ,6DACE;;;KADF,kBAK+B,CAC3B,MAAO,EACR,CAED;;;KATF,qDAayC,CACrC,MAAO,EACR,CAED;;;KAjBF,8CAqBkC,CAC9B,MAAO,EACR,CAED;;;KAzBF,IA6BE,iBAAc,8BACZ;AACA,KAAKC,QAAL,CAAgBC,SAASD,QAAT,EAAhB,CACA,KAAKE,OAAL,CAAeD,SAASC,OAAT,EAAf,CACA,KAAKC,IAAL,CAAYF,SAASE,IAAT,EAAZ,CAEA;AACA,KAAKC,YAAL,CAAoB,EACrB,CAED;;KAvCF,0FA0C2B,CACvB,KAAKA,YAAL,CAAkBC,OAAlB,CAA0B,oBAAOC,KAAIC,GAAJ,EAAP,CAA1B,EACA,KAAKH,YAAL,CAAoB,EACrB,CAED;;;;;KA/CF,gEAqDsBI,MArDtB,CAqD8BC,QArD9B,CAqDwCC,eArDxC,CAqDyD,CACrD,MAAO,MAAKC,gBAAL,cAAmCH,MAAnC,CAA6CC,QAA7C,CAAuDC,eAAvD,CAAwE,KAAxE,CACR,CAED;;;;;;;KAzDF,gDAiEcF,MAjEd,CAiEsB,CAClB,MAAO,MAAKI,iBAAL,cAAoCJ,MAApC,CACHV,YAAYC,QAAZ,CAAqBc,kBADlB,CACsC,IADtC,CAC4C,KAD5C,CAER,CAED;;;;;KAtEF,sEA4EyBJ,QA5EzB,CA4EmCK,YA5EnC,CA4EiD,CAC7C,MAAO,MAAKH,gBAAL,CAAsB,SAAtB,CAAiCF,QAAjC,CAA2CK,YAA3C,CACR,CAED;;;;;;;KAhFF,2CAwFa,CACT,MAAO,MAAKF,iBAAL,CAAuB,SAAvB,CAAkCd,YAAYC,QAAZ,CAAqBgB,eAAvD,CACR,CAED;;;;;KA5FF,gEAkGsBN,QAlGtB,CAkGgCK,YAlGhC,CAkG8C,CAC1C,MAAO,MAAKH,gBAAL,UAA+B,KAAKR,IAAL,CAAUa,WAAV,CAAsBC,GAArD,CAA4DR,QAA5D,CAAsEK,YAAtE,CACH,IADG,CAER,CAED;;;;;;;KAvGF,2DA+GqB,CACjB,MAAO,MAAKF,iBAAL,UAAgC,KAAKT,IAAL,CAAUa,WAAV,CAAsBC,GAAtD,CACHnB,YAAYC,QAAZ,CAAqBgB,eADlB,CACmC,IADnC,CACyC,IADzC,CAER,CAED;;;;;KApHF,gEA0HsBE,GA1HtB,CA0H2BR,QA1H3B,CA0HqCK,YA1HrC,CA0HmD,CAC/C,MAAO,MAAKH,gBAAL,YAAiCM,GAAjC,UAA8CR,QAA9C,CACHK,YADG,CACW,IADX,CAER,CAED;;;;;;;KA/HF,0DAuImBG,GAvInB,CAuIwB,CACpB,MAAO,MAAKL,iBAAL,YAAkCK,GAAlC,UACHnB,YAAYC,QAAZ,CAAqBmB,yBADlB,CAC6C,IAD7C,CACmD,IADnD,CAER,CAED;;;;;;;;;KA5IF,0DAsJmBC,GAtJnB,CAsJwBV,QAtJxB,CAsJkF,mBAAhDW,cAAgD,2DAAhC,IAAgC,IAA1BC,iBAA0B,2DAAP,KAAO,CAC9E;AACA,GAAIC,SAAU,KAAKtB,QAAL,CAAcM,GAAd,CAAkBa,GAAlB,CAAd,CACA,GAAIC,aAAJ,CAAmB,CACjBE,QAAUA,QAAQC,UAAR,GAAqBC,OAArB,CAA6BJ,aAA7B,CACX,CACDE,QAAQG,EAAR,CAAW,aAAX,CAA0B,kBAAY,CACpC,GAAIC,SAASC,GAAT,GAAiBP,aAArB,CAAoC,CAClC,GAAI,CAACC,gBAAL,CAAuB,CACrBZ,SAASiB,SAASC,GAAlB,CAAuBD,SAASE,GAAT,EAAvB,CACD,CAFD,IAEO,CACL,MAAK5B,QAAL,CAAcM,GAAd,WAA4BoB,SAASC,GAArC,EAA4CE,IAA5C,CAAiD,OAAjD,EAA0DC,IAA1D,CACI,yBAAYrB,UAASsB,SAASJ,GAAlB,CAAuBI,SAASH,GAAT,EAAvB,CAAZ,CADJ,CAED,CACF,CACF,CATD,EAUA,KAAKxB,YAAL,CAAkB4B,IAAlB,CAAuBV,OAAvB,CACD,CAED;;;;;;;;;;;;;KAzKF,4DAuLoBH,GAvLpB,CAuLyBc,QAvLzB,CAuLqF,oBAAlDC,gBAAkD,2DAAhC,IAAgC,IAA1Bb,iBAA0B,2DAAP,KAAO,CACjFc,QAAQC,GAAR,CAAY,uBAAZ,CAAqCjB,GAArC,CAA0C,UAA1C,CAAsDe,eAAtD,CAAuE,WAAvE,CAAoFD,QAApF,EACA,GAAI3B,KAAM,KAAKN,QAAL,CAAcM,GAAd,CAAkBa,GAAlB,CAAV,CACA,GAAIe,eAAJ,CAAqB,CACnB5B,IAAMA,IAAIiB,UAAJ,GAAiBc,KAAjB,CAAuBH,eAAvB,CACP,CACD;AACA,MAAO5B,KAAIgC,WAAJ,CAAgBL,SAAW,CAA3B,EAA8BJ,IAA9B,CAAmC,OAAnC,EAA4CC,IAA5C,CAAiD,cAAQ,CAC9D,GAAMS,SAAUC,KAAKZ,GAAL,IAAc,EAA9B,CAEA;AACA,GAAIa,UAAW,IAAf,CACA,GAAMC,UAAWC,OAAOC,IAAP,CAAYL,OAAZ,CAAjB,CACA,GAAIG,SAASG,MAAT,CAAkBZ,QAAtB,CAAgC,CAC9B,MAAOM,SAAQG,SAAS,CAAT,CAAR,CAAP,CACA,GAAMI,oBAAqBJ,SAASK,KAAT,EAA3B,CACAN,SAAW,0BAAM,QAAK7B,iBAAL,CACbO,GADa,CACRc,QADQ,CACEa,kBADF,CACsBzB,gBADtB,CAAN,CAEZ,CACD,GAAIA,gBAAJ,CAAsB,CACpB;AACA,GAAM2B,SAAUN,SAASO,GAAT,CAAa,uBAAU,QAAKC,WAAL,CAAiB1C,MAAjB,CAAV,CAAb,CAAhB,CACA;AACA;AACA,MAAO2C,SAAQC,GAAR,CAAYJ,OAAZ,EAAqBlB,IAArB,CAA0B,iBAAW,CAC1C,GAAMuB,WAAY,EAAlB,CACAC,QAAQjD,OAAR,CAAgB,gBAAU,CACxB,GAAIkD,OAAO3B,GAAP,EAAJ,CAAkB,CAChBW,QAAQgB,OAAO5B,GAAf,EAAsB4B,OAAO3B,GAAP,EACvB,CAFD,IAEO,CACL;AACA,MAAOW,SAAQgB,OAAO5B,GAAf,CAAP,CACA0B,UAAUrB,IAAV,CAAe,OAAKwB,cAAL,CAAoBrC,GAApB,CAAyBoC,OAAO5B,GAAhC,CAAf,CACD,CACF,CARD,EASA,GAAI0B,UAAUR,MAAV,CAAmB,CAAvB,CAA0B,CACxB;AACA;AACA,MAAO,QAAKjC,iBAAL,CAAuBO,GAAvB,CAA4Bc,QAA5B,CAAsCC,eAAtC,CAAuDb,gBAAvD,CACR,CACD,MAAO,CAACkB,QAASA,OAAV,CAAmBE,SAAUA,QAA7B,CACR,CAjBM,CAkBR,CACD,MAAO,CAACF,QAASA,OAAV,CAAmBE,SAAUA,QAA7B,CACR,CArCM,CAsCR,CAED;;KAtOF,6EAyO8B,iBAC1B;AACA,GAAMgB,cAAe,KAAKzD,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,cAArB,CACA,KAAKb,YAAL,CAAkB4B,IAAlB,CAAuByB,YAAvB,EACAA,aAAahC,EAAb,CAAgB,aAAhB,CAA+B,uBAAiB,CAC9C;AACA,GAAMiC,aAAcC,cAAchC,GAAlC,CACA,GAAIiC,sBAAuB,OAAK5D,QAAL,CAAcM,GAAd,YAA6BoD,WAA7B,UAA3B,CACA,GAAIC,cAAc/B,GAAd,YAA+BiC,OAAnC,CAA2C,CACzCD,qBAAuBA,qBAAqBrC,UAArB,GAAkCC,OAAlC,CAA0CmC,cAAc/B,GAAd,EAA1C,CACxB,CACD,OAAKxB,YAAL,CAAkB4B,IAAlB,CAAuB4B,oBAAvB,EACAA,qBAAqBnC,EAArB,CAAwB,aAAxB,CAAuC,kBAAY,CACjD,GAAIM,SAASJ,GAAT,GAAiBgC,cAAc/B,GAAd,EAArB,CAA0C,CACxC,GAAMkC,SAAU,EAAhB,CACAA,iBAAiB,OAAK3D,IAAL,CAAUa,WAAV,CAAsBC,GAAvC,KAA8Cc,SAASJ,GAAvD,EAAgE,IAAhE,CACAmC,mBAAmB,OAAK3D,IAAL,CAAUa,WAAV,CAAsBC,GAAzC,eAA0DyC,WAA1D,EAA2E3B,SAASJ,GAApF,CACA,OAAK3B,QAAL,CAAcM,GAAd,GAAoByD,MAApB,CAA2BD,OAA3B,CACD,CACF,CAPD,CAQD,CAhBD,EAiBA;AACAL,aAAahC,EAAb,CAAgB,eAAhB,CAAiC,uBAAiB,CAChD;AACA,GAAMuC,gBAAiBL,cAAchC,GAArC,CACA,OAAK3B,QAAL,CAAcM,GAAd,YAA6B0D,cAA7B,WAAqDzD,GAArD,EACD,CAJD,CAKD,CAED;;KAtQF,yDAyQoB,iBAChB;AACA,GAAMkD,cAAe,KAAKzD,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,cAArB,CACA,MAAOwC,cAAa5B,IAAb,CAAkB,OAAlB,CAA2B,uBAAiB,CACjD;AACA,GAAMoC,WAAYN,cAAc/B,GAAd,EAAlB,CACA,GAAI,CAACqC,SAAL,CAAgB,CACd,MACD,CACD,GAAMC,kBAAmBvB,OAAOC,IAAP,CAAYqB,SAAZ,EAAuBhB,GAAvB,CAA2B,qBAAe,CACjE,GAAIW,sBAAuB,OAAK5D,QAAL,CAAcM,GAAd,YAA6BoD,WAA7B,UAA3B,CACA,GAAMS,kBAAmBF,UAAUP,WAAV,CAAzB,CACA,GAAIS,2BAA4BN,OAAhC,CAAwC,CACtCD,qBAAuBA,qBAAqBrC,UAArB,GAAkCC,OAAlC,CAA0C2C,gBAA1C,CACxB,CACD,MAAOP,sBAAqB/B,IAArB,CAA0B,OAA1B,CAAmC,kBAAY,CACpD,GAAMiC,SAAU,EAAhB,CACA,GAAI,CAAC/B,SAASH,GAAT,EAAL,CAAqB,CACnB,MACD,CACDe,OAAOC,IAAP,CAAYb,SAASH,GAAT,EAAZ,EAA4BvB,OAA5B,CAAoC,gBAAU,CAC5C,GAAIG,SAAW2D,gBAAf,CAAiC,CAC/BL,iBAAiB,OAAK3D,IAAL,CAAUa,WAAV,CAAsBC,GAAvC,KAA8CT,MAA9C,EAA0D,IAA1D,CACAsD,mBAAmB,OAAK3D,IAAL,CAAUa,WAAV,CAAsBC,GAAzC,eAA0DyC,WAA1D,EAA2ElD,MAC5E,CACF,CALD,EAMA,MAAO,QAAKR,QAAL,CAAcM,GAAd,GAAoByD,MAApB,CAA2BD,OAA3B,CACR,CAZM,CAaR,CAnBwB,CAAzB,CAoBA,MAAOX,SAAQC,GAAR,CAAYc,gBAAZ,CACR,CA3BM,CA4BR,CAED;;KA1SF,gDA6ScE,YA7Sd,CA6S4BC,UA7S5B,CA6SwC,CACpCD,aAAeE,SAASF,YAAT,EAAuBG,WAAvB,EAAf,CACA,GAAMC,OAAQ,KAAKxE,QAAL,CAAcM,GAAd,CAAkB,SAAlB,EACTmE,YADS,CACI,yBADJ,EAC+BjD,OAD/B,CACuC4C,YADvC,EAETM,YAFS,CAEIL,UAFJ,EAEgBxC,IAFhB,CAEqB,OAFrB,CAAd,CAGA,GAAM8C,eAAgB,KAAK3E,QAAL,CAAcM,GAAd,CAAkB,SAAlB,EACjBmE,YADiB,CACJ,kCADI,EACgCjD,OADhC,CACwC4C,YADxC,EAEjBM,YAFiB,CAEJL,UAFI,EAEQxC,IAFR,CAEa,OAFb,CAAtB,CAGA,MAAOsB,SAAQC,GAAR,CAAY,CAACoB,KAAD,CAAQG,aAAR,CAAZ,EAAoC7C,IAApC,CAAyC,iBAAW,CACzD,GAAM8C,QAAS,EAAf,CACA;AACAtB,QAAQjD,OAAR,CAAgB,uBAAUkD,QAAOlD,OAAP,CAAe,cAAQ,CAC/CuE,OAAOpC,KAAKb,GAAZ,EAAmBa,KAAKZ,GAAL,EACpB,CAFyB,CAAV,CAAhB,EAIA;AACA,GAAMiD,SAAUlC,OAAOC,IAAP,CAAYgC,MAAZ,CAAhB,CACAC,QAAQxE,OAAR,CAAgB,gBAAU,CACxB,GAAMyE,MAAOF,OAAOG,MAAP,EAAeC,aAAf,CAA6BC,SAA1C,CACA,GAAMC,cAAeN,OAAOG,MAAP,EAAeC,aAAf,CAA6BG,kBAAlD,CACA,GAAI,CAACL,KAAKM,UAAL,CAAgBhB,YAAhB,CAAD,EAAkC,CAACc,aAAaE,UAAb,CAAwBhB,YAAxB,CAAvC,CAA8E,CAC5E,MAAOQ,QAAOG,MAAP,CACR,CACF,CAND,EAOA,MAAOH,OACR,CAjBM,CAkBR,CAED;;KAzUF,iEA4UwB,CACpB,GAAIS,aAAcpF,SAASE,IAAT,GAAgBa,WAAhB,CAA4BqE,WAA9C,CACA,GAAIC,UAAWrF,SAASE,IAAT,GAAgBa,WAAhB,CAA4BuE,QAA3C,CAEA;AACA,GAAID,WAAaA,SAASE,OAAT,CAAiB,wBAAjB,IAA+C,CAAC,CAAhD,EAAqDF,SAASE,OAAT,CAAiB,WAAjB,IAAkC,CAAC,CAArG,CAAJ,CAA6G,CAC3G;AACA,GAAMC,aAAcxF,SAASE,IAAT,GAAgBa,WAAhB,CAA4B0E,YAA5B,CAAyCC,IAAzC,CAA8C,6BAAgBD,cAAaE,UAAb,GAA4B,cAA5C,CAA9C,EAA0G3E,GAA9H,CACAqE,uCAAyCG,WAAzC,uBACAxF,SAASE,IAAT,GAAgBa,WAAhB,CAA4B6E,aAA5B,CAA0C,CAACN,SAAUD,QAAX,CAA1C,EAAgExD,IAAhE,CAAqE,UAAM,CACzEK,QAAQC,GAAR,CAAY,uBAAZ,CACD,CAFD,CAGD,CAED,GAAI,CAACiD,WAAL,CAAkB,CAChBA,YAAc,WACf,CACD,GAAIS,gBAAiBT,YAAYd,WAAZ,EAArB,CACA,GAAIwB,wBAAyBD,eAAeE,KAAf,CAAqB,GAArB,EAA0BC,OAA1B,GAAoCC,IAApC,CAAyC,GAAzC,CAA7B,CACA,GAAI,CACFJ,eAAiBxB,SAASwB,cAAT,CAAjB,CACAC,uBAAyBzB,SAASyB,sBAAT,CAC1B,CAAC,MAAOI,CAAP,CAAU,CACVhE,QAAQiE,KAAR,CAAcD,CAAd,CACD,CAED,GAAME,YAAa,CACjBC,gBAAiBhB,UAAY,IADZ,CAEjBL,UAAWI,WAFM,CAGjBL,cAAe,CACbC,UAAWa,cADE,CAEbX,mBAAoBY,sBAFP,CAHE,CAAnB,CAQA,MAAO,MAAK/F,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,EAA0D8C,MAA1D,CAAiEsC,UAAjE,EAA6EvE,IAA7E,CAAkF,UAAM,CAC7FK,QAAQC,GAAR,CAAY,yBAAZ,CACD,CAFM,CAGR,CAED;;KAnXF,gDAsXc5B,MAtXd,CAsXsB,CAClB,MAAO,MAAKR,QAAL,CAAcM,GAAd,WAA4BE,MAA5B,EAAsCqB,IAAtC,CAA2C,OAA3C,CACR,CAED;;KA1XF,8DA6XqBrB,MA7XrB,CA6X6BC,QA7X7B,CA6XuC,CACnC;AACA,GAAM8F,UAAW,KAAKvG,QAAL,CAAcM,GAAd,UAA2BE,MAA3B,KAAqC,KAAKL,IAAL,CAAUa,WAAV,CAAsBC,GAA3D,CAAjB,CACAsF,SAAS9E,EAAT,CAAY,OAAZ,CAAqB,qBAAQhB,UAAS,CAAC,CAAC+B,KAAKZ,GAAL,EAAX,CAAR,CAArB,EACA,KAAKxB,YAAL,CAAkB4B,IAAlB,CAAuBuE,QAAvB,CACD,CAED;;KApYF,8CAuYa/F,MAvYb,CAuYqBgG,KAvYrB,CAuY4B,CACxB,MAAO,MAAKxG,QAAL,CAAcM,GAAd,UAA2BE,MAA3B,KAAqC,KAAKL,IAAL,CAAUa,WAAV,CAAsBC,GAA3D,EACFwF,GADE,CACED,MAAQvG,SAASD,QAAT,CAAkB0G,WAAlB,CAA8BC,SAAtC,CAAkD,IADpD,CAER,CAED;;KA5YF,8CA+YanG,MA/Yb,CA+YqBoG,WA/YrB,CA+YkC,CAC9B,GAAMC,eAAgB,CACpBC,KAAMF,WADc,CAEpBG,UAAW9G,SAASD,QAAT,CAAkB0G,WAAlB,CAA8BC,SAFrB,CAGpBK,OAAQ,CACN/F,IAAK,KAAKd,IAAL,CAAUa,WAAV,CAAsBC,GADrB,CAENgE,UAAW,KAAK9E,IAAL,CAAUa,WAAV,CAAsBqE,WAAtB,EAAqC,WAF1C,CAGNiB,gBAAiB,KAAKnG,IAAL,CAAUa,WAAV,CAAsBuE,QAAtB,EAAkC,IAH7C,CAHY,CAAtB,CASA,MAAO,MAAKvF,QAAL,CAAcM,GAAd,aAA8BE,MAA9B,EAAwCwB,IAAxC,CAA6C6E,aAA7C,CACR,CAED;;KA5ZF,oDA+ZgBrG,MA/ZhB,CA+ZwByG,SA/ZxB,CA+ZmC,CAC/B,MAAO,MAAKjH,QAAL,CAAcM,GAAd,cAA+BE,MAA/B,KAAyCyG,SAAzC,EAAsDC,MAAtD,EACR,CAED;;KAnaF,gDAsac1G,MAtad,CAsasByG,SAtatB,CAsaiCL,WAtajC,CAsa8C,CAC1C,MAAO,MAAK5G,QAAL,CAAcM,GAAd,cAA+BE,MAA/B,KAAyCyG,SAAzC,EAAsDlD,MAAtD,CAA6D,CAClE+C,KAAMF,WAD4D,CAElEG,UAAW9G,SAASD,QAAT,CAAkB0G,WAAlB,CAA8BC,SAFyB,CAA7D,CAIR,CAED;;KA7aF,8DAgbqBnG,MAhbrB,CAgb6ByG,SAhb7B,CAgbwCxG,QAhbxC,CAgbkD,CAC9C,GAAM0G,YAAa,KAAKnH,QAAL,CAAcM,GAAd,cAA+BE,MAA/B,KAAyCyG,SAAzC,CAAnB,CACAE,WAAW1F,EAAX,CAAc,OAAd,CAAuBhB,QAAvB,EACA,KAAKL,YAAL,CAAkB4B,IAAlB,CAAuBmF,UAAvB,CACD,CAED;;;KAtbF,kDA0beC,GA1bf,CA0boBC,KA1bpB,CA0b2BC,QA1b3B,CA0bqCR,IA1brC,CA0b2C,iBACvC;AACA,GAAMS,YAAa,KAAKvH,QAAL,CAAcM,GAAd,CAAkB,QAAlB,EAA4B0B,IAA5B,GAAmCL,GAAtD,CAEA;AACA,GAAM6F,QAAS,KAAKtH,OAAL,CAAaI,GAAb,CAAoB,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAA1C,UAAsDsG,UAAtD,KAAoED,QAApE,CAAf,CACA,GAAMG,UAAW,CACfC,YAAaN,IAAIO,IADF,CAAjB,CAGA,GAAMC,eAAgBJ,OAAOK,GAAP,CAAWT,GAAX,CAAgBK,QAAhB,EAA0B3F,IAA1B,CAA+B,kBAAY,CAC/DK,QAAQC,GAAR,CAAY,yBAAZ,CAAuC0F,SAASC,UAAhD,CAA4D,QAA5D,EACA,MAAOD,UAASxH,GAAT,CAAa0H,cAAb,GAA8BlG,IAA9B,CAAmC,aAAO,CAC/CK,QAAQC,GAAR,CAAY,mBAAZ,CAAiC6F,GAAjC,EACA,MAAOA,IACR,CAHM,CAIR,CANqB,EAMnBC,KANmB,CAMb,eAAS,CAChB/F,QAAQiE,KAAR,CAAc,+BAAd,CAA+CA,KAA/C,CACD,CARqB,CAAtB,CAUA;AACA,GAAM+B,UAAW,KAAKjI,OAAL,CAAaI,GAAb,CAAoB,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAA1C,WAAuDsG,UAAvD,KAAqED,QAArE,CAAjB,CACA,GAAMc,gBAAiBD,SAASN,GAAT,CAAaR,KAAb,CAAoBI,QAApB,EAA8B3F,IAA9B,CAAmC,kBAAY,CACpEK,QAAQC,GAAR,CAAY,2BAAZ,CAAyC0F,SAASC,UAAlD,CAA8D,QAA9D,EACA,MAAOD,UAASxH,GAAT,CAAa0H,cAAb,GAA8BlG,IAA9B,CAAmC,aAAO,CAC/CK,QAAQC,GAAR,CAAY,mBAAZ,CAAiC6F,GAAjC,EACA,MAAOA,IACR,CAHM,CAIR,CANsB,EAMpBC,KANoB,CAMd,eAAS,CAChB/F,QAAQiE,KAAR,CAAc,iCAAd,CAAiDA,KAAjD,CACD,CARsB,CAAvB,CAUA,MAAOjD,SAAQC,GAAR,CAAY,CAACwE,aAAD,CAAgBQ,cAAhB,CAAZ,EAA6CtG,IAA7C,CAAkD,cAAQ,CAC/D;AACA;AACA,GAAMiC,QAAS,EAAf,CACAA,iBAAiBwD,UAAjB,EAAiC,CAC/Bc,SAAUC,KAAK,CAAL,CADqB,CAE/BC,UAAWD,KAAK,CAAL,CAFoB,CAG/BxB,KAAMA,IAHyB,CAI/B0B,OAAQ,KAJuB,CAK/BzB,UAAW9G,SAASD,QAAT,CAAkB0G,WAAlB,CAA8BC,SALV,CAM/B8B,iBAAkBjB,OAAOkB,QAAP,EANa,CAO/BC,kBAAmBR,SAASO,QAAT,EAPY,CAQ/B1B,OAAQ,CACN/F,IAAK,OAAKd,IAAL,CAAUa,WAAV,CAAsBC,GADrB,CAENgE,UAAW,OAAK9E,IAAL,CAAUa,WAAV,CAAsBqE,WAAtB,EAAqC,WAF1C,CAGNiB,gBAAiB,OAAKnG,IAAL,CAAUa,WAAV,CAAsBuE,QAAtB,EAAkC,IAH7C,CARuB,CAAjC,CAcAxB,kBAAkB,OAAK5D,IAAL,CAAUa,WAAV,CAAsBC,GAAxC,WAAqDsG,UAArD,EAAqE,IAArE,CACAxD,gBAAgB,OAAK5D,IAAL,CAAUa,WAAV,CAAsBC,GAAtC,KAA6CsG,UAA7C,EAA6D,IAA7D,CACA,MAAO,QAAKvH,QAAL,CAAcM,GAAd,GAAoByD,MAApB,CAA2BA,MAA3B,EAAmCjC,IAAnC,CAAwC,iBAAMyF,WAAN,CAAxC,CACR,CArBM,CAsBR,CAED;;;;;KAjfF,0DAufmBvD,cAvfnB,CAufmC4E,MAvfnC,CAuf2C,iBACvC;AACA,MAAO,MAAK5I,QAAL,CAAcM,GAAd,YAA6B0D,cAA7B,WAAqDnC,IAArD,CAA0D,OAA1D,EAAmEC,IAAnE,CACH,cAAQ,CACN,GAAMuE,YAAa,EAAnB,CACA,GAAIwC,YAAa,IAAjB,CAEA;AACArG,KAAKnC,OAAL,CAAa,cAAQ,CACnBgG,oBAAoB,OAAKlG,IAAL,CAAUa,WAAV,CAAsBC,GAA1C,KAAiD6H,KAAKnH,GAAtD,EAA+DiH,OAAS,CAAC,CAACA,MAAX,CAAoB,IAAnF,CACAC,WAAaC,KAAKnH,GACnB,CAHD,EAKA;AACA0E,sBAAsB,OAAKlG,IAAL,CAAUa,WAAV,CAAsBC,GAA5C,eAA6D+C,cAA7D,EACI4E,OAASC,UAAT,CAAsB,IAD1B,CAGA;AACAxC,yBAAyBrC,cAAzB,KAA2C,OAAK7D,IAAL,CAAUa,WAAV,CAAsBC,GAAjE,EACI2H,OAAS,CAAC,CAACA,MAAX,CAAoB,IADxB,CAEA,MAAO,QAAK5I,QAAL,CAAcM,GAAd,GAAoByD,MAApB,CAA2BsC,UAA3B,CACR,CAnBE,CAoBR,CAED;;KA/gBF,wDAkhBkBrC,cAlhBlB,CAkhBkC+E,KAlhBlC,CAkhByC,CACrC;AACA,GAAMhF,QAAS,EAAf,CACAA,oBAAoB,KAAK5D,IAAL,CAAUa,WAAV,CAAsBC,GAA1C,KAAiD+C,cAAjD,EAAqE+E,MAAQ,CAAC,CAACA,KAAV,CAAkB,IAAvF,CACAhF,mBAAmBC,cAAnB,KAAqC,KAAK7D,IAAL,CAAUa,WAAV,CAAsBC,GAA3D,EAAoE8H,MAAQ,CAAC,CAACA,KAAV,CAAkB,IAAtF,CAEA,MAAO,MAAK/I,QAAL,CAAcM,GAAd,GAAoByD,MAApB,CAA2BA,MAA3B,CACR,CAED;;KA3hBF,kFA8hB+BgB,MA9hB/B,CA8hBuCtE,QA9hBvC,CA8hBiD,CAC7C,GAAMuI,iBACF,KAAKhJ,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,eAAoE8D,MAApE,CADJ,CAEAiE,gBAAgBvH,EAAhB,CAAmB,OAAnB,CAA4BhB,QAA5B,EACA,KAAKL,YAAL,CAAkB4B,IAAlB,CAAuBgH,eAAvB,CACD,CAED;;KAriBF,oFAwiBgCjE,MAxiBhC,CAwiBwCtE,QAxiBxC,CAwiBkD,CAC9C,GAAMwI,gBACF,KAAKjJ,QAAL,CAAcM,GAAd,cAA+B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAArD,KAA4D8D,MAA5D,CADJ,CAEAkE,eAAexH,EAAf,CAAkB,OAAlB,CAA2BhB,QAA3B,EACA,KAAKL,YAAL,CAAkB4B,IAAlB,CAAuBiH,cAAvB,CACD,CAED;;KA/iBF,4EAkjB4BC,OAljB5B,CAkjBqC,CACjC,MAAO,MAAKlJ,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,yBACFwF,GADE,CACEyC,QAAUA,OAAV,CAAoB,IADtB,CAER,CAED;;KAvjBF,oEA0jBwBC,KA1jBxB,CA0jB+B,CAC3B,MAAO,MAAKnJ,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,wBAA6EkI,KAA7E,EACF1C,GADE,CACE,IADF,CAER,CAED;;KA/jBF,4GAkkB4ChG,QAlkB5C,CAkkBsD,CAClD,GAAMuI,iBACF,KAAKhJ,QAAL,CAAcM,GAAd,YAA6B,KAAKH,IAAL,CAAUa,WAAV,CAAsBC,GAAnD,wBADJ,CAEA+H,gBAAgBvH,EAAhB,CAAmB,OAAnB,CAA4BhB,QAA5B,EACA,KAAKL,YAAL,CAAkB4B,IAAlB,CAAuBgH,eAAvB,CACD,CAED;;KAzkBF,wDA4kBkB/H,GA5kBlB,CA4kBuB,CACnB,MAAO,MAAKjB,QAAL,CAAcM,GAAd,YAA6BW,GAA7B,EAAoCY,IAApC,CAAyC,OAAzC,CACR,CAED;;;;KAhlBF,oEAqlBwBrB,MArlBxB,CAqlBgC4I,aArlBhC,CAqlB+C,CAC3C,GAAM7C,UAAW,KAAKvG,QAAL,CAAcM,GAAd,WAA4BE,MAA5B,CAAjB,CACA+F,SAAS9E,EAAT,CAAY,OAAZ,CAAqB,qBAAQ2H,eAAc5G,KAAK6G,WAAL,EAAd,CAAR,CAArB,EACA,KAAKjJ,YAAL,CAAkB4B,IAAlB,CAAuBuE,QAAvB,CACD,CAED;;KA3lBF,0EA8lB2B/F,MA9lB3B,CA8lBmC8I,gBA9lBnC,CA8lBqD,CACjD,GAAMC,aAAc,KAAKvJ,QAAL,CAAcM,GAAd,cAA+BE,MAA/B,CAApB,CACA+I,YAAY9H,EAAZ,CAAe,OAAf,CAAwB,qBAAQ6H,kBAAiB9G,KAAK6G,WAAL,EAAjB,CAAR,CAAxB,EACA,KAAKjJ,YAAL,CAAkB4B,IAAlB,CAAuBuH,WAAvB,CACD,CAED;;;;KApmBF,4EAymB4BtI,GAzmB5B,CAymBiCuI,iBAzmBjC,CAymBoD,CAChD,GAAMC,cAAe,KAAKzJ,QAAL,CAAcM,GAAd,eAAgCW,GAAhC,CAArB,CACAwI,aAAahI,EAAb,CAAgB,OAAhB,CAAyB,qBAAQ+H,mBAAkBhH,KAAK6G,WAAL,EAAlB,CAAR,CAAzB,EACA,KAAKjJ,YAAL,CAAkB4B,IAAlB,CAAuByH,YAAvB,CACD,CAED;;KA/mBF,4EAknB4BxI,GAlnB5B,CAknBiCyI,iBAlnBjC,CAknBoD,CAChD,GAAMjG,cAAe,KAAKzD,QAAL,CAAcM,GAAd,YAA6BW,GAA7B,cAArB,CACAwC,aAAahC,EAAb,CAAgB,OAAhB,CAAyB,qBAAQiI,mBAAkBlH,KAAK6G,WAAL,EAAlB,CAAR,CAAzB,EACA,KAAKjJ,YAAL,CAAkB4B,IAAlB,CAAuByB,YAAvB,CACD,CAED;;KAxnBF,wEA2nB0BjD,MA3nB1B,CA2nBkCC,QA3nBlC,CA2nB4C,CACxC,GAAM0H,UAAW,KAAKnI,QAAL,CAAcM,GAAd,WAA4BE,MAA5B,cAAjB,CACA2H,SAAS1G,EAAT,CAAY,OAAZ,CAAqB,qBAAQhB,UAAS+B,KAAKZ,GAAL,EAAT,CAAR,CAArB,EACA,KAAKxB,YAAL,CAAkB4B,IAAlB,CAAuBmG,QAAvB,CACD,CAED;;KAjoBF,kEAooBuBlH,GApoBvB,CAooB4B,iBACxB,MAAO,MAAKjB,QAAL,CAAcM,GAAd,YAA6BW,GAA7B,eAA8CY,IAA9C,CAAmD,OAAnD,EAA4DC,IAA5D,CAAiE,cAAQ,CAC9E,GAAIU,KAAKZ,GAAL,EAAJ,CAAgB,CACd,GAAM+H,eAAgBhH,OAAOC,IAAP,CAAYJ,KAAKZ,GAAL,EAAZ,CAAtB,CACA,GAAMgI,+BAAgCD,cAAc1G,GAAd,CACpC,6BAAgB,QAAK4G,eAAL,CAAqBC,YAArB,CAAhB,CADoC,CAAtC,CAEA,MAAO3G,SAAQC,GAAR,CAAYwG,6BAAZ,EAA2C9H,IAA3C,CAAgD,iBAAW,CAChE,GAAMiI,UAAW,EAAjB,CACAzG,QAAQjD,OAAR,CAAgB,gBAAU,CACxB,GAAIkD,OAAO3B,GAAP,EAAJ,CAAkB,CAChBmI,SAASxG,OAAO5B,GAAhB,EAAuB4B,OAAO3B,GAAP,EACxB,CACF,CAJD,EAKA,MAAOmI,SACR,CARM,CASR,CACD,MAAO,EACR,CAhBM,CAiBR,CAED;;KAxpBF,oEA2pBwB9I,GA3pBxB,CA2pB6B+I,aA3pB7B,CA2pB4C,CACxC,GAAMC,cAAe,KAAKjK,QAAL,CAAcM,GAAd,YAA6BW,GAA7B,UAArB,CACAgJ,aAAaxI,EAAb,CAAgB,OAAhB,CAAyB,qBAAQuI,eAAcxH,KAAK6G,WAAL,EAAd,CAAR,CAAzB,EACA,KAAKjJ,YAAL,CAAkB4B,IAAlB,CAAuBiI,YAAvB,CACD,CAED;;;KAjqBF,8CAqqBazJ,MArqBb,CAqqBqB0J,aArqBrB,CAqqBoCC,eArqBpC,CAqqBqD,CACjDhI,QAAQC,GAAR,aAAwB5B,MAAxB,EACA,GAAM4J,WAAY,EAAlB,CACAA,qBAAqB,KAAKjK,IAAL,CAAUa,WAAV,CAAsBC,GAA3C,WAAwDT,MAAxD,EAAoE,IAApE,CACA4J,uBAAuB5J,MAAvB,EAAmC,IAAnC,CACA4J,oBAAoB5J,MAApB,EAAgC,IAAhC,CACA4J,oBAAoB5J,MAApB,EAAgC,IAAhC,CACA4J,mBAAmB,KAAKjK,IAAL,CAAUa,WAAV,CAAsBC,GAAzC,KAAgDT,MAAhD,EAA4D,IAA5D,CACA,GAAM6J,oBAAqB,KAAKrK,QAAL,CAAcM,GAAd,GAAoByD,MAApB,CAA2BqG,SAA3B,CAA3B,CACA,GAAIF,aAAJ,CAAmB,CACjB,GAAMI,sBAAuB,KAAKpK,OAAL,CAAaqK,UAAb,CAAwBL,aAAxB,EAAuCM,MAAvC,EAA7B,CACA,GAAMC,wBAAyB,KAAKvK,OAAL,CAAaqK,UAAb,CAAwBJ,eAAxB,EAAyCK,MAAzC,EAA/B,CACA,MAAOrH,SAAQC,GAAR,CAAY,CAACiH,kBAAD,CAAqBC,oBAArB,CAA2CG,sBAA3C,CAAZ,CACR,CACD,MAAOJ,mBACR,CAED;;KAtrBF,8CAyrBa7J,MAzrBb,CAyrBqB,CACjB,MAAO,MAAKR,QAAL,CAAcM,GAAd,eAAgCE,MAAhC,KAA0C,KAAKL,IAAL,CAAUa,WAAV,CAAsBC,GAAhE,EAAuEwF,GAAvE,CAA2E,IAA3E,CACR,CAED;;KA7rBF,oDAgsBgBjG,MAhsBhB,CAgsBwByG,SAhsBxB,CAgsBmC,CAC/B,MAAO,MAAKjH,QAAL,CAAcM,GAAd,kBAAmCE,MAAnC,KAA6CyG,SAA7C,KAA0D,KAAK9G,IAAL,CAAUa,WAAV,CAAsBC,GAAhF,EAAuFwF,GAAvF,CAA2F,IAA3F,CACR,CAED;;KApsBF,sDAusBiBtF,GAvsBjB,CAusBsBX,MAvsBtB,CAusB8B,CAC1B,MAAO,MAAKR,QAAL,CAAcM,GAAd,CAAqBa,GAArB,KAA4BX,MAA5B,EAAsC0G,MAAtC,EACR,CAED;;KA3sBF,0EA8sB2BwD,gBA9sB3B,CA8sB6C,CACzC,GAAMC,UAAW,KAAK3K,QAAL,CAAcM,GAAd,UAAjB,CACAqK,SAASlJ,EAAT,CAAY,eAAZ,CAA6B,qBAAQiJ,kBAAiBlI,KAAKb,GAAtB,CAAR,CAA7B,EACA,KAAKvB,YAAL,CAAkB4B,IAAlB,CAAuB2I,QAAvB,CACD,CAltBH,qBAqtBA7K,YAAYG,QAAZ,CAAuB,GAAIH,aAAYC,QAAvC","file":"firebase.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles all Firebase interactions.\n */\nfriendlyPix.Firebase = class {\n  /**\n   * Number of posts loaded initially and per page for the feeds.\n   * @return {number}\n   */\n  static get POSTS_PAGE_SIZE() {\n    return 5;\n  }\n\n  /**\n   * Number of posts loaded initially and per page for the User Profile page.\n   * @return {number}\n   */\n  static get USER_PAGE_POSTS_PAGE_SIZE() {\n    return 6;\n  }\n\n  /**\n   * Number of posts comments loaded initially and per page.\n   * @return {number}\n   */\n  static get COMMENTS_PAGE_SIZE() {\n    return 3;\n  }\n\n  /**\n   * Initializes this Firebase facade.\n   * @constructor\n   */\n  constructor() {\n    // Firebase SDK.\n    this.database = firebase.database();\n    this.storage = firebase.storage();\n    this.auth = firebase.auth();\n\n    // Firebase references that are listened to.\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Turns off all Firebase listeners.\n   */\n  cancelAllSubscriptions() {\n    this.firebaseRefs.forEach(ref => ref.off());\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Subscribes to receive updates from a post's comments. The given `callback` function gets\n   * called for each new comment to the post with ID `postId`.\n   *\n   * If provided we'll only listen to comments that were posted after `latestCommentId`.\n   */\n  subscribeToComments(postId, callback, latestCommentId) {\n    return this._subscribeToFeed(`/comments/${postId}`, callback, latestCommentId, false);\n  }\n\n  /**\n   * Paginates comments from the post with ID `postId`.\n   *\n   * Fetches a page of `COMMENTS_PAGE_SIZE` comments from the post.\n   *\n   * We return a `Promise` which resolves with an Map of comments and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getComments(postId) {\n    return this._getPaginatedFeed(`/comments/${postId}`,\n        friendlyPix.Firebase.COMMENTS_PAGE_SIZE, null, false);\n  }\n\n  /**\n   * Subscribes to receive updates to the general posts feed. The given `callback` function gets\n   * called for each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToGeneralFeed(callback, latestPostId) {\n    return this._subscribeToFeed('/posts/', callback, latestPostId);\n  }\n\n  /**\n   * Paginates posts from the global post feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the global feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getPosts() {\n    return this._getPaginatedFeed('/posts/', friendlyPix.Firebase.POSTS_PAGE_SIZE);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToHomeFeed(callback, latestPostId) {\n    return this._subscribeToFeed(`/feed/${this.auth.currentUser.uid}`, callback, latestPostId,\n        true);\n  }\n\n  /**\n   * Paginates posts from the user's home feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the user's home feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getHomeFeedPosts() {\n    return this._getPaginatedFeed(`/feed/${this.auth.currentUser.uid}`,\n        friendlyPix.Firebase.POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToUserFeed(uid, callback, latestPostId) {\n    return this._subscribeToFeed(`/people/${uid}/posts`, callback,\n        latestPostId, true);\n  }\n\n  /**\n   * Paginates posts from the user's posts feed.\n   *\n   * Fetches a page of `USER_PAGE_POSTS_PAGE_SIZE` posts from the user's posts feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getUserFeedPosts(uid) {\n    return this._getPaginatedFeed(`/people/${uid}/posts`,\n        friendlyPix.Firebase.USER_PAGE_POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the given feed. The given `callback` function gets called\n   * for each new entry on the given feed.\n   *\n   * If provided we'll only listen to entries that were posted after `latestEntryId`. This allows to\n   * listen only for new feed entries after fetching existing entries using `_getPaginatedFeed()`.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds.\n   * @private\n   */\n  _subscribeToFeed(uri, callback, latestEntryId = null, fetchPostDetails = false) {\n    // Load all posts information.\n    let feedRef = this.database.ref(uri);\n    if (latestEntryId) {\n      feedRef = feedRef.orderByKey().startAt(latestEntryId);\n    }\n    feedRef.on('child_added', feedData => {\n      if (feedData.key !== latestEntryId) {\n        if (!fetchPostDetails) {\n          callback(feedData.key, feedData.val());\n        } else {\n          this.database.ref(`/posts/${feedData.key}`).once('value').then(\n              postData => callback(postData.key, postData.val()));\n        }\n      }\n    });\n    this.firebaseRefs.push(feedRef);\n  }\n\n  /**\n   * Paginates entries from the given feed.\n   *\n   * Fetches a page of `pageSize` entries from the given feed.\n   *\n   * If provided we'll return entries that were posted before (and including) `earliestEntryId`.\n   *\n   * We return a `Promise` which resolves with an Map of entries and a function to the next page or\n   * `null` if there is no next page.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds like the user\n   * home feed and the user post feed.\n   * @private\n   */\n  _getPaginatedFeed(uri, pageSize, earliestEntryId = null, fetchPostDetails = false) {\n    console.log('Fetching entries from', uri, 'start at', earliestEntryId, 'page size', pageSize);\n    let ref = this.database.ref(uri);\n    if (earliestEntryId) {\n      ref = ref.orderByKey().endAt(earliestEntryId);\n    }\n    // We're fetching an additional item as a cheap way to test if there is a next page.\n    return ref.limitToLast(pageSize + 1).once('value').then(data => {\n      const entries = data.val() || {};\n\n      // Figure out if there is a next page.\n      let nextPage = null;\n      const entryIds = Object.keys(entries);\n      if (entryIds.length > pageSize) {\n        delete entries[entryIds[0]];\n        const nextPageStartingId = entryIds.shift();\n        nextPage = () => this._getPaginatedFeed(\n            uri, pageSize, nextPageStartingId, fetchPostDetails);\n      }\n      if (fetchPostDetails) {\n        // Fetch details of all posts.\n        const queries = entryIds.map(postId => this.getPostData(postId));\n        // Since all the requests are being done one the same feed it's unlikely that a single one\n        // would fail and not the others so using Promise.all() is not so risky.\n        return Promise.all(queries).then(results => {\n          const deleteOps = [];\n          results.forEach(result => {\n            if (result.val()) {\n              entries[result.key] = result.val();\n            } else {\n              // We encountered a deleted post. Removing permanently from the feed.\n              delete entries[result.key];\n              deleteOps.push(this.deleteFromFeed(uri, result.key));\n            }\n          });\n          if (deleteOps.length > 0) {\n            // We had to remove some deleted posts from the feed. Lets run the query again to get\n            // the correct number of posts.\n            return this._getPaginatedFeed(uri, pageSize, earliestEntryId, fetchPostDetails);\n          }\n          return {entries: entries, nextPage: nextPage};\n        });\n      }\n      return {entries: entries, nextPage: nextPage};\n    });\n  }\n\n  /**\n   * Keeps the home feed populated with latest followed users' posts live.\n   */\n  startHomeFeedLiveUpdaters() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    this.firebaseRefs.push(followingRef);\n    followingRef.on('child_added', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const followedUid = followingData.key;\n      let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n      if (followingData.val() instanceof String) {\n        followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(followingData.val());\n      }\n      this.firebaseRefs.push(followedUserPostsRef);\n      followedUserPostsRef.on('child_added', postData => {\n        if (postData.key !== followingData.val()) {\n          const updates = {};\n          updates[`/feed/${this.auth.currentUser.uid}/${postData.key}`] = true;\n          updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postData.key;\n          this.database.ref().update(updates);\n        }\n      });\n    });\n    // Stop listening to users we unfollow.\n    followingRef.on('child_removed', followingData => {\n      // Stop listening the followed user's posts to populate the home feed.\n      const followedUserId = followingData.key;\n      this.database.ref(`/people/${followedUserId}/posts`).off();\n    });\n  }\n\n  /**\n   * Updates the home feed with new followed users' posts and returns a promise once that's done.\n   */\n  updateHomeFeeds() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    return followingRef.once('value', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const following = followingData.val();\n      if (!following) {\n        return;\n      }\n      const updateOperations = Object.keys(following).map(followedUid => {\n        let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n        const lastSyncedPostId = following[followedUid];\n        if (lastSyncedPostId instanceof String) {\n          followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(lastSyncedPostId);\n        }\n        return followedUserPostsRef.once('value', postData => {\n          const updates = {};\n          if (!postData.val()) {\n            return;\n          }\n          Object.keys(postData.val()).forEach(postId => {\n            if (postId !== lastSyncedPostId) {\n              updates[`/feed/${this.auth.currentUser.uid}/${postId}`] = true;\n              updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postId;\n            }\n          });\n          return this.database.ref().update(updates);\n        });\n      });\n      return Promise.all(updateOperations);\n    });\n  }\n\n  /**\n   * Returns the users which name match the given search query as a Promise.\n   */\n  searchUsers(searchString, maxResults) {\n    searchString = latinize(searchString).toLowerCase();\n    const query = this.database.ref('/people')\n        .orderByChild('_search_index/full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    const reversedQuery = this.database.ref('/people')\n        .orderByChild('_search_index/reversed_full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    return Promise.all([query, reversedQuery]).then(results => {\n      const people = {};\n      // construct people from the two search queries results.\n      results.forEach(result => result.forEach(data => {\n        people[data.key] = data.val();\n      }));\n\n      // Remove results that do not start with the search query.\n      const userIds = Object.keys(people);\n      userIds.forEach(userId => {\n        const name = people[userId]._search_index.full_name;\n        const reversedName = people[userId]._search_index.reversed_full_name;\n        if (!name.startsWith(searchString) && !reversedName.startsWith(searchString)) {\n          delete people[userId];\n        }\n      });\n      return people;\n    });\n  }\n\n  /**\n   * Saves or updates public user data in Firebase (such as image URL, display name...).\n   */\n  updatePublicProfile() {\n    let displayName = firebase.auth().currentUser.displayName;\n    let imageUrl = firebase.auth().currentUser.photoURL;\n\n    // If the main profile Pic is an expiring facebook profile pic URL we'll update it automatically to use the permanent graph API URL.\n    if (imageUrl && (imageUrl.indexOf('lookaside.facebook.com') !== -1 || imageUrl.indexOf('fbcdn.net') !== -1)) {\n      // Fid the user's Facebook UID.\n      const facebookUID = firebase.auth().currentUser.providerData.find(providerData => providerData.providerId === 'facebook.com').uid;\n      imageUrl = `https://graph.facebook.com/${facebookUID}/picture?type=large`;\n      firebase.auth().currentUser.updateProfile({photoURL: imageUrl}).then(() => {\n        console.log('User profile updated.');\n      });\n    }\n\n    if (!displayName) {\n      displayName = 'Anonymous';\n    }\n    let searchFullName = displayName.toLowerCase();\n    let searchReversedFullName = searchFullName.split(' ').reverse().join(' ');\n    try {\n      searchFullName = latinize(searchFullName);\n      searchReversedFullName = latinize(searchReversedFullName);\n    } catch (e) {\n      console.error(e);\n    }\n\n    const updateData = {\n      profile_picture: imageUrl || null,\n      full_name: displayName,\n      _search_index: {\n        full_name: searchFullName,\n        reversed_full_name: searchReversedFullName\n      }\n    };\n    return this.database.ref(`/people/${this.auth.currentUser.uid}`).update(updateData).then(() => {\n      console.log('Public profile updated.');\n    });\n  }\n\n  /**\n   * Fetches a single post data.\n   */\n  getPostData(postId) {\n    return this.database.ref(`/posts/${postId}`).once('value');\n  }\n\n  /**\n   * Subscribe to receive updates on a user's post like status.\n   */\n  registerToUserLike(postId, callback) {\n    // Load and listen to new Likes.\n    const likesRef = this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`);\n    likesRef.on('value', data => callback(!!data.val()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Updates the like status of a post from the current user.\n   */\n  updateLike(postId, value) {\n    return this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`)\n        .set(value ? firebase.database.ServerValue.TIMESTAMP : null);\n  }\n\n  /**\n   * Adds a comment to a post.\n   */\n  addComment(postId, commentText) {\n    const commentObject = {\n      text: commentText,\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\n      author: {\n        uid: this.auth.currentUser.uid,\n        full_name: this.auth.currentUser.displayName || 'Anonymous',\n        profile_picture: this.auth.currentUser.photoURL || null\n      }\n    };\n    return this.database.ref(`comments/${postId}`).push(commentObject);\n  }\n\n  /**\n   * Deletes a comment.\n   */\n  deleteComment(postId, commentId) {\n    return this.database.ref(`/comments/${postId}/${commentId}`).remove();\n  }\n\n  /**\n   * Edit a comment.\n   */\n  editComment(postId, commentId, commentText) {\n    return this.database.ref(`/comments/${postId}/${commentId}`).update({\n      text: commentText,\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  }\n\n  /**\n   * Subscribe to a comment update.\n   */\n  subscribeToComment(postId, commentId, callback) {\n    const commentRef = this.database.ref(`/comments/${postId}/${commentId}`);\n    commentRef.on('value', callback);\n    this.firebaseRefs.push(commentRef);\n  }\n\n  /**\n   * Uploads a new Picture to Cloud Storage and adds a new post referencing it.\n   * This returns a Promise which completes with the new Post ID.\n   */\n  uploadNewPic(pic, thumb, fileName, text) {\n    // Get a reference to where the post will be created.\n    const newPostKey = this.database.ref('/posts').push().key;\n\n    // Start the pic file upload to Cloud Storage.\n    const picRef = this.storage.ref(`${this.auth.currentUser.uid}/full/${newPostKey}/${fileName}`);\n    const metadata = {\n      contentType: pic.type\n    };\n    const picUploadTask = picRef.put(pic, metadata).then(snapshot => {\n      console.log('New pic uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      return snapshot.ref.getDownloadURL().then(url => {\n        console.log('File available at', url);\n        return url;\n      });\n    }).catch(error => {\n      console.error('Error while uploading new pic', error);\n    });\n\n    // Start the thumb file upload to Cloud Storage.\n    const thumbRef = this.storage.ref(`${this.auth.currentUser.uid}/thumb/${newPostKey}/${fileName}`);\n    const tumbUploadTask = thumbRef.put(thumb, metadata).then(snapshot => {\n      console.log('New thumb uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      return snapshot.ref.getDownloadURL().then(url => {\n        console.log('File available at', url);\n        return url;\n      });\n    }).catch(error => {\n      console.error('Error while uploading new thumb', error);\n    });\n\n    return Promise.all([picUploadTask, tumbUploadTask]).then(urls => {\n      // Once both pics and thumbnails has been uploaded add a new post in the Firebase Database and\n      // to its fanned out posts lists (user's posts and home post).\n      const update = {};\n      update[`/posts/${newPostKey}`] = {\n        full_url: urls[0],\n        thumb_url: urls[1],\n        text: text,\n        client: 'web',\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        full_storage_uri: picRef.toString(),\n        thumb_storage_uri: thumbRef.toString(),\n        author: {\n          uid: this.auth.currentUser.uid,\n          full_name: this.auth.currentUser.displayName || 'Anonymous',\n          profile_picture: this.auth.currentUser.photoURL || null\n        }\n      };\n      update[`/people/${this.auth.currentUser.uid}/posts/${newPostKey}`] = true;\n      update[`/feed/${this.auth.currentUser.uid}/${newPostKey}`] = true;\n      return this.database.ref().update(update).then(() => newPostKey);\n    });\n  }\n\n  /**\n   * Follow/Unfollow a user and return a promise once that's done.\n   *\n   * If the user is now followed we'll add all his posts to the home feed of the follower.\n   * If the user is now not followed anymore all his posts are removed from the follower home feed.\n   */\n  toggleFollowUser(followedUserId, follow) {\n    // Add or remove posts to the user's home feed.\n    return this.database.ref(`/people/${followedUserId}/posts`).once('value').then(\n        data => {\n          const updateData = {};\n          let lastPostId = true;\n\n          // Add/remove followed user's posts to the home feed.\n          data.forEach(post => {\n            updateData[`/feed/${this.auth.currentUser.uid}/${post.key}`] = follow ? !!follow : null;\n            lastPostId = post.key;\n          });\n\n          // Add/remove followed user to the 'following' list.\n          updateData[`/people/${this.auth.currentUser.uid}/following/${followedUserId}`] =\n              follow ? lastPostId : null;\n\n          // Add/remove signed-in user to the list of followers.\n          updateData[`/followers/${followedUserId}/${this.auth.currentUser.uid}`] =\n              follow ? !!follow : null;\n          return this.database.ref().update(updateData);\n        });\n  }\n\n  /**\n   * Blocks/Unblocks a user and return a promise once that's done.\n   */\n  toggleBlockUser(followedUserId, block) {\n    // Add or remove posts to the user's home feed.\n    const update = {};\n    update[`/blocking/${this.auth.currentUser.uid}/${followedUserId}`] = block ? !!block : null;\n    update[`/blocked/${followedUserId}/${this.auth.currentUser.uid}`] = block ? !!block : null;\n\n    return this.database.ref().update(update);\n  }\n\n  /**\n   * Listens to updates on the followed status of the given user.\n   */\n  registerToFollowStatusUpdate(userId, callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/following/${userId}`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Listens to updates on the blocked status of the given user.\n   */\n  registerToBlockedStatusUpdate(userId, callback) {\n    const blockStatusRef =\n        this.database.ref(`/blocking/${this.auth.currentUser.uid}/${userId}`);\n    blockStatusRef.on('value', callback);\n    this.firebaseRefs.push(blockStatusRef);\n  }\n\n  /**\n   * Enables or disables the notifications for that user.\n   */\n  toggleNotificationEnabled(checked) {\n    return this.database.ref(`/people/${this.auth.currentUser.uid}/notificationEnabled`)\n        .set(checked ? checked : null);\n  }\n\n  /**\n   * Saves the given notification token.\n   */\n  saveNotificationToken(token) {\n    return this.database.ref(`/people/${this.auth.currentUser.uid}/notificationTokens/${token}`)\n        .set(true);\n  }\n\n  /**\n   * Listens to updates on the Enable notifications status of the current user.\n   */\n  registerToNotificationEnabledStatusUpdate(callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/notificationEnabled`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Load a single user profile information\n   */\n  loadUserProfile(uid) {\n    return this.database.ref(`/people/${uid}`).once('value');\n  }\n\n  /**\n   * Listens to updates on the likes of a post and calls the callback with likes counts.\n   * TODO: This won't scale if a user has a huge amount of likes. We need to keep track of a\n   *       likes count instead.\n   */\n  registerForLikesCount(postId, likesCallback) {\n    const likesRef = this.database.ref(`/likes/${postId}`);\n    likesRef.on('value', data => likesCallback(data.numChildren()));\n    this.firebaseRefs.push(likesRef);\n  }\n\n  /**\n   * Listens to updates on the comments of a post and calls the callback with comments counts.\n   */\n  registerForCommentsCount(postId, commentsCallback) {\n    const commentsRef = this.database.ref(`/comments/${postId}`);\n    commentsRef.on('value', data => commentsCallback(data.numChildren()));\n    this.firebaseRefs.push(commentsRef);\n  }\n\n  /**\n   * Listens to updates on the followers of a person and calls the callback with followers counts.\n   * TODO: This won't scale if a user has a huge amount of followers. We need to keep track of a\n   *       follower count instead.\n   */\n  registerForFollowersCount(uid, followersCallback) {\n    const followersRef = this.database.ref(`/followers/${uid}`);\n    followersRef.on('value', data => followersCallback(data.numChildren()));\n    this.firebaseRefs.push(followersRef);\n  }\n\n  /**\n   * Listens to updates on the followed people of a person and calls the callback with its count.\n   */\n  registerForFollowingCount(uid, followingCallback) {\n    const followingRef = this.database.ref(`/people/${uid}/following`);\n    followingRef.on('value', data => followingCallback(data.numChildren()));\n    this.firebaseRefs.push(followingRef);\n  }\n\n  /**\n   * Listens for changes of the thumbnail URL of a given post.\n   */\n  registerForThumbChanges(postId, callback) {\n    const thumbRef = this.database.ref(`/posts/${postId}/thumb_url`);\n    thumbRef.on('value', data => callback(data.val()));\n    this.firebaseRefs.push(thumbRef);\n  }\n\n  /**\n   * Fetch the list of followed people's profile.\n   */\n  getFollowingProfiles(uid) {\n    return this.database.ref(`/people/${uid}/following`).once('value').then(data => {\n      if (data.val()) {\n        const followingUids = Object.keys(data.val());\n        const fetchProfileDetailsOperations = followingUids.map(\n          followingUid => this.loadUserProfile(followingUid));\n        return Promise.all(fetchProfileDetailsOperations).then(results => {\n          const profiles = {};\n          results.forEach(result => {\n            if (result.val()) {\n              profiles[result.key] = result.val();\n            }\n          });\n          return profiles;\n        });\n      }\n      return {};\n    });\n  }\n\n  /**\n   * Listens to updates on the user's posts and calls the callback with user posts counts.\n   */\n  registerForPostsCount(uid, postsCallback) {\n    const userPostsRef = this.database.ref(`/people/${uid}/posts`);\n    userPostsRef.on('value', data => postsCallback(data.numChildren()));\n    this.firebaseRefs.push(userPostsRef);\n  }\n\n  /**\n   * Deletes the given post from the global post feed and the user's post feed. Also deletes\n   * comments, likes and the file on Cloud Storage.\n   */\n  deletePost(postId, picStorageUri, thumbStorageUri) {\n    console.log(`Deleting ${postId}`);\n    const updateObj = {};\n    updateObj[`/people/${this.auth.currentUser.uid}/posts/${postId}`] = null;\n    updateObj[`/comments/${postId}`] = null;\n    updateObj[`/likes/${postId}`] = null;\n    updateObj[`/posts/${postId}`] = null;\n    updateObj[`/feed/${this.auth.currentUser.uid}/${postId}`] = null;\n    const deleteFromDatabase = this.database.ref().update(updateObj);\n    if (picStorageUri) {\n      const deletePicFromStorage = this.storage.refFromURL(picStorageUri).delete();\n      const deleteThumbFromStorage = this.storage.refFromURL(thumbStorageUri).delete();\n      return Promise.all([deleteFromDatabase, deletePicFromStorage, deleteThumbFromStorage]);\n    }\n    return deleteFromDatabase;\n  }\n\n  /**\n   * Flags the posts for inappropriate content.\n   */\n  reportPost(postId) {\n    return this.database.ref(`/postFlags/${postId}/${this.auth.currentUser.uid}`).set(true);\n  }\n\n  /**\n   * Flags the comment for inappropriate content.\n   */\n  reportComment(postId, commentId) {\n    return this.database.ref(`/commentFlags/${postId}/${commentId}/${this.auth.currentUser.uid}`).set(true);\n  }\n\n  /**\n   * Deletes the given postId entry from the user's home feed.\n   */\n  deleteFromFeed(uri, postId) {\n    return this.database.ref(`${uri}/${postId}`).remove();\n  }\n\n  /**\n   * Listens to deletions on posts from the global feed.\n   */\n  registerForPostsDeletion(deletionCallback) {\n    const postsRef = this.database.ref(`/posts`);\n    postsRef.on('child_removed', data => deletionCallback(data.key));\n    this.firebaseRefs.push(postsRef);\n  }\n};\n\nfriendlyPix.firebase = new friendlyPix.Firebase();\n"]}